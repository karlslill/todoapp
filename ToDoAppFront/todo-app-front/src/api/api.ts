/* tslint:disable */
/* eslint-disable */
/**
 * WebApp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.ts';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base.ts';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ToDoTask
 */
export interface ToDoTask {
    /**
     * 
     * @type {number}
     * @memberof ToDoTask
     */
    'id': number | null;
    /**
     * 
     * @type {string}
     * @memberof ToDoTask
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ToDoTask
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ToDoTask
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ToDoTask
     */
    'dueDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ToDoTask
     */
    'isDone'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ToDoTask
     */
    'parentId'?: number | null;
    /**
     * 
     * @type {ToDoTask}
     * @memberof ToDoTask
     */
    'parent'?: ToDoTask;
    /**
     * 
     * @type {Array<ToDoTask>}
     * @memberof ToDoTask
     */
    'subTodos'?: Array<ToDoTask> | null;
}

/**
 * ToDoTaskApi - axios parameter creator
 * @export
 */
export const ToDoTaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [search] 
         * @param {boolean} [isDone] 
         * @param {string} [dueDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskGet: async (search?: string, isDone?: boolean, dueDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDoTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isDone !== undefined) {
                localVarQueryParameter['isDone'] = isDone;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = (dueDate as any instanceof Date) ?
                    (dueDate as any).toISOString() :
                    dueDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiToDoTaskIdDelete', 'id', id)
            const localVarPath = `/api/ToDoTask/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiToDoTaskIdGet', 'id', id)
            const localVarPath = `/api/ToDoTask/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdPut: async (id: number, toDoTask?: ToDoTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiToDoTaskIdPut', 'id', id)
            const localVarPath = `/api/ToDoTask/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toDoTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskPost: async (toDoTask?: ToDoTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDoTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toDoTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToDoTaskApi - functional programming interface
 * @export
 */
export const ToDoTaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToDoTaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [search] 
         * @param {boolean} [isDone] 
         * @param {string} [dueDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDoTaskGet(search?: string, isDone?: boolean, dueDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiToDoTaskGet(search, isDone, dueDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDoTaskApi.apiToDoTaskGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDoTaskIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiToDoTaskIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDoTaskApi.apiToDoTaskIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDoTaskIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiToDoTaskIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDoTaskApi.apiToDoTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDoTaskIdPut(id: number, toDoTask?: ToDoTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiToDoTaskIdPut(id, toDoTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDoTaskApi.apiToDoTaskIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDoTaskPost(toDoTask?: ToDoTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiToDoTaskPost(toDoTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToDoTaskApi.apiToDoTaskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ToDoTaskApi - factory interface
 * @export
 */
export const ToDoTaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToDoTaskApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [search] 
         * @param {boolean} [isDone] 
         * @param {string} [dueDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskGet(search?: string, isDone?: boolean, dueDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiToDoTaskGet(search, isDone, dueDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiToDoTaskIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiToDoTaskIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskIdPut(id: number, toDoTask?: ToDoTask, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiToDoTaskIdPut(id, toDoTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ToDoTask} [toDoTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDoTaskPost(toDoTask?: ToDoTask, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiToDoTaskPost(toDoTask, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToDoTaskApi - object-oriented interface
 * @export
 * @class ToDoTaskApi
 * @extends {BaseAPI}
 */
export class ToDoTaskApi extends BaseAPI {
    /**
     * 
     * @param {string} [search] 
     * @param {boolean} [isDone] 
     * @param {string} [dueDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoTaskApi
     */
    public apiToDoTaskGet(search?: string, isDone?: boolean, dueDate?: string, options?: RawAxiosRequestConfig) {
        return ToDoTaskApiFp(this.configuration).apiToDoTaskGet(search, isDone, dueDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoTaskApi
     */
    public apiToDoTaskIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ToDoTaskApiFp(this.configuration).apiToDoTaskIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoTaskApi
     */
    public apiToDoTaskIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ToDoTaskApiFp(this.configuration).apiToDoTaskIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ToDoTask} [toDoTask] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoTaskApi
     */
    public apiToDoTaskIdPut(id: number, toDoTask?: ToDoTask, options?: RawAxiosRequestConfig) {
        return ToDoTaskApiFp(this.configuration).apiToDoTaskIdPut(id, toDoTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ToDoTask} [toDoTask] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoTaskApi
     */
    public apiToDoTaskPost(toDoTask?: ToDoTask, options?: RawAxiosRequestConfig) {
        return ToDoTaskApiFp(this.configuration).apiToDoTaskPost(toDoTask, options).then((request) => request(this.axios, this.basePath));
    }
}



